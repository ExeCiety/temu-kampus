generator client {
  provider      = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  email    String    @unique
  role     String
  password String
  accounts Account[]
  sessions Session[]

  createdEvents Event[]            @relation("UserEvents")
  reviews       Review[]           @relation("UserReviews")
  notifications Notification[]     @relation("UserNotifications")
  participants  EventParticipant[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  date          DateTime
  time          String
  locationId    String?            @db.ObjectId
  location      Location?          @relation(fields: [locationId], references: [id])
  createdBy     String             @db.ObjectId
  creator       User               @relation("UserEvents", fields: [createdBy], references: [id])
  participants  EventParticipant[]
  reviews       Review[]
  resources     EventResource[]
  notifications Notification[]
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation("UserReviews", fields: [userId], references: [id])
  eventId   String   @db.ObjectId
  event     Event    @relation(fields: [eventId], references: [id])
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
  eventId   String?  @db.ObjectId
  event     Event?   @relation(fields: [eventId], references: [id])
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Location {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  address  String
  capacity Int
  events   Event[]
}

model Resource {
  id       String          @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  quantity Int
  events   EventResource[]
}

model EventParticipant {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}

model EventResource {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  eventId    String   @db.ObjectId
  event      Event    @relation(fields: [eventId], references: [id])
  resourceId String   @db.ObjectId
  resource   Resource @relation(fields: [resourceId], references: [id])

  @@unique([eventId, resourceId])
}
